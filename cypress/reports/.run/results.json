{"status":"finished","startedTestsAt":"2024-02-14T11:56:28.147Z","endedTestsAt":"2024-02-14T11:56:44.943Z","totalDuration":13645,"totalSuites":2,"totalTests":2,"totalPassed":1,"totalPending":0,"totalFailed":1,"totalSkipped":0,"runs":[{"stats":{"suites":1,"tests":1,"passes":0,"pending":0,"skipped":0,"failures":1,"duration":8805,"startedAt":"2024-02-14T11:56:28.147Z","endedAt":"2024-02-14T11:56:36.952Z"},"reporter":"nyan","reporterStats":{"suites":1,"tests":1,"passes":0,"pending":0,"failures":1,"start":"2024-02-14T11:56:28.157Z","end":"2024-02-14T11:56:36.964Z","duration":8807},"hooks":[{"hookName":"before all","title":["\"before all\" hook"],"body":"function() {\n            beforeHandler.call(this, context);\n          }"},{"hookName":"before each","title":["\"before each\" hook"],"body":"function() {\n            beforeEachHandler.call(this, context);\n          }"},{"hookName":"after each","title":["\"after each\" hook"],"body":"function() {\n            afterEachHandler.call(this, context);\n          }"},{"hookName":"after all","title":["\"after all\" hook"],"body":"function() {\n            afterHandler.call(this, context);\n          }"}],"tests":[{"title":["Cadastro de Candidato","Cadastrar candidato com sucesso"],"state":"failed","body":"function() {\n          var _a2, _b, _c, _d, _e;\n          const { remainingSteps, testCaseStartedId } = retrieveInternalSpecProperties();\n          taskTestCaseStarted(context, {\n            id: testCaseStartedId,\n            testCaseId,\n            attempt: attempt++,\n            timestamp: (0, messages_1.createTimestamp)()\n          });\n          window.testState = {\n            gherkinDocument,\n            pickles,\n            pickle\n          };\n          for (const step of steps) {\n            if (step.hook) {\n              const hook = step.hook;\n              const testStepId = getTestStepId({\n                context,\n                pickleId: pickle.id,\n                hookIdOrPickleStepId: hook.id\n              });\n              cy.then(() => {\n                delete window.testState.pickleStep;\n                const start = (0, messages_1.createTimestamp)();\n                internalProperties.currentStepStartedAt = start;\n                taskTestStepStarted(context, {\n                  testStepId,\n                  testCaseStartedId,\n                  timestamp: start\n                });\n                return cy.wrap(start, { log: false });\n              }).then((start) => {\n                const options = {\n                  pickle,\n                  gherkinDocument,\n                  testCaseStartedId\n                };\n                (0, cypress_1.runStepWithLogGroup)({\n                  fn: () => registry2.runCaseHook(this, hook, options),\n                  keyword: hook.keyword,\n                  text: createStepDescription(hook)\n                });\n                return cy.wrap(start, { log: false });\n              }).then((start) => {\n                const end = (0, messages_1.createTimestamp)();\n                taskTestStepFinished(context, {\n                  testStepId,\n                  testCaseStartedId,\n                  testStepResult: {\n                    status: messages.TestStepResultStatus.PASSED,\n                    duration: (0, messages_1.duration)(start, end)\n                  },\n                  timestamp: end\n                });\n                remainingSteps.shift();\n              });\n            } else if (step.pickleStep) {\n              const pickleStep = step.pickleStep;\n              const testStepId = getTestStepId({\n                context,\n                pickleId: pickle.id,\n                hookIdOrPickleStepId: pickleStep.id\n              });\n              const text = (0, assertions_1.assertAndReturn)(pickleStep.text, \"Expected pickle step to have a text\");\n              const scenarioStep = (0, assertions_1.assertAndReturn)(context.astIdsMap.get((0, assertions_1.assertAndReturn)((_a2 = pickleStep.astNodeIds) === null || _a2 === void 0 ? void 0 : _a2[0], \"Expected to find at least one astNodeId\")), `Expected to find scenario step associated with id = ${(_b = pickleStep.astNodeIds) === null || _b === void 0 ? void 0 : _b[0]}`);\n              const argument = ((_c = pickleStep.argument) === null || _c === void 0 ? void 0 : _c.dataTable) ? new data_table_1.default(pickleStep.argument.dataTable) : ((_e = (_d = pickleStep.argument) === null || _d === void 0 ? void 0 : _d.docString) === null || _e === void 0 ? void 0 : _e.content) ? pickleStep.argument.docString.content : void 0;\n              cy.then(() => {\n                window.testState.pickleStep = step.pickleStep;\n                const start = (0, messages_1.createTimestamp)();\n                internalProperties.currentStep = { pickleStep };\n                internalProperties.currentStepStartedAt = start;\n                taskTestStepStarted(context, {\n                  testStepId,\n                  testCaseStartedId,\n                  timestamp: start\n                });\n                return cy.wrap(start, { log: false });\n              }).then((start) => {\n                const beforeStepHooks = registry2.resolveBeforeStepHooks(tags);\n                const afterStepHooks = registry2.resolveAfterStepHooks(tags);\n                const options = {\n                  pickle,\n                  pickleStep,\n                  gherkinDocument,\n                  testCaseStartedId,\n                  testStepId\n                };\n                const beforeHooksChain = beforeStepHooks.reduce((chain, beforeStepHook) => {\n                  return chain.then(() => (0, cypress_1.runStepWithLogGroup)({\n                    keyword: \"BeforeStep\",\n                    text: createStepDescription(beforeStepHook),\n                    fn: () => registry2.runStepHook(this, beforeStepHook, options)\n                  }));\n                }, cy.wrap({}, { log: false }));\n                return beforeHooksChain.then(() => {\n                  try {\n                    return (0, cypress_1.runStepWithLogGroup)({\n                      keyword: (0, assertions_1.assertAndReturn)(\"keyword\" in scenarioStep && scenarioStep.keyword, \"Expected to find a keyword in the scenario step\"),\n                      argument,\n                      text,\n                      fn: () => registry2.runStepDefininition(this, text, argument)\n                    }).then((result) => {\n                      return afterStepHooks.reduce((chain, afterStepHook) => {\n                        return chain.then(() => (0, cypress_1.runStepWithLogGroup)({\n                          keyword: \"AfterStep\",\n                          text: createStepDescription(afterStepHook),\n                          fn: () => registry2.runStepHook(this, afterStepHook, options)\n                        }));\n                      }, cy.wrap({}, { log: false })).then(() => {\n                        return { start, result };\n                      });\n                    });\n                  } catch (e) {\n                    if (e instanceof registry_1.MissingDefinitionError) {\n                      throw new Error(createMissingStepDefinitionMessage(context, pickleStep, context.registry.parameterTypeRegistry));\n                    } else {\n                      throw e;\n                    }\n                  }\n                });\n              }).then(({ start, result }) => {\n                var _a3, _b2, _c2;\n                const end = (0, messages_1.createTimestamp)();\n                if (result === \"pending\" || result === \"skipped\") {\n                  if (result === \"pending\") {\n                    taskTestStepFinished(context, {\n                      testStepId,\n                      testCaseStartedId,\n                      testStepResult: {\n                        status: messages.TestStepResultStatus.PENDING,\n                        duration: (0, messages_1.duration)(start, end)\n                      },\n                      timestamp: end\n                    });\n                  } else {\n                    taskTestStepFinished(context, {\n                      testStepId,\n                      testCaseStartedId,\n                      testStepResult: {\n                        status: messages.TestStepResultStatus.SKIPPED,\n                        duration: (0, messages_1.duration)(start, end)\n                      },\n                      timestamp: end\n                    });\n                  }\n                  remainingSteps.shift();\n                  for (const skippedStep of remainingSteps) {\n                    const hookIdOrPickleStepId = (0, assertions_1.assertAndReturn)((_b2 = (_a3 = skippedStep.hook) === null || _a3 === void 0 ? void 0 : _a3.id) !== null && _b2 !== void 0 ? _b2 : (_c2 = skippedStep.pickleStep) === null || _c2 === void 0 ? void 0 : _c2.id, \"Expected a step to either be a hook or a pickleStep\");\n                    const testStepId2 = getTestStepId({\n                      context,\n                      pickleId: pickle.id,\n                      hookIdOrPickleStepId\n                    });\n                    taskTestStepStarted(context, {\n                      testStepId: testStepId2,\n                      testCaseStartedId,\n                      timestamp: (0, messages_1.createTimestamp)()\n                    });\n                    taskTestStepFinished(context, {\n                      testStepId: testStepId2,\n                      testCaseStartedId,\n                      testStepResult: {\n                        status: messages.TestStepResultStatus.SKIPPED,\n                        duration: {\n                          seconds: 0,\n                          nanos: 0\n                        }\n                      },\n                      timestamp: (0, messages_1.createTimestamp)()\n                    });\n                  }\n                  for (let i = 0, count = remainingSteps.length; i < count; i++) {\n                    remainingSteps.pop();\n                  }\n                  cy.then(() => this.skip());\n                } else {\n                  taskTestStepFinished(context, {\n                    testStepId,\n                    testCaseStartedId,\n                    testStepResult: {\n                      status: messages.TestStepResultStatus.PASSED,\n                      duration: (0, messages_1.duration)(start, end)\n                    },\n                    timestamp: end\n                  });\n                  remainingSteps.shift();\n                }\n              });\n            }\n          }\n        }","displayError":"Error: \nStep implementation missing for \"O usuário informar Full Name \"Fulano de tal\"\".\n\nWe tried searching for files containing step definitions using the following search pattern templates:\n\n  - cypress/e2e/[filepath]/**/*.{js,ts}\n  - cypress/e2e/[filepath].{js,ts}\n  - cypress/support/steps/**/*.{js,ts}\n\nThese templates resolved to the following search patterns:\n\n  - cypress\\e2e\\adicionarNovoCandidato\\**\\*.{js,ts}\n  - cypress\\e2e\\adicionarNovoCandidato.{js,ts}\n  - cypress\\support\\steps\\**\\*.{js,ts}\n\nThese patterns matched the following files:\n\n  - cypress\\support\\steps\\login\\loginSucessStep.js\n  - cypress\\support\\steps\\adicionarCandidatos\\adicionarNovoCandidato.js\n\nHowever, none of these files contained a step definition matching \"O usuário informar Full Name \"Fulano de tal\"\".\n\nYou can implement it using the suggestion(s) below.\n\n  When(\"O usuário informar Full Name {string}\", function (string) {\n    return \"pending\";\n  });\n  \n    at Context.eval (https://opensource-demo.orangehrmlive.com/__cypress/tests?p=cypress\\e2e\\features\\adicionarNovoCandidato.feature:15054:29)","attempts":[{"state":"failed","error":{"name":"Error","message":"\nStep implementation missing for \"O usuário informar Full Name \"Fulano de tal\"\".\n\nWe tried searching for files containing step definitions using the following search pattern templates:\n\n  - cypress/e2e/[filepath]/**/*.{js,ts}\n  - cypress/e2e/[filepath].{js,ts}\n  - cypress/support/steps/**/*.{js,ts}\n\nThese templates resolved to the following search patterns:\n\n  - cypress\\e2e\\adicionarNovoCandidato\\**\\*.{js,ts}\n  - cypress\\e2e\\adicionarNovoCandidato.{js,ts}\n  - cypress\\support\\steps\\**\\*.{js,ts}\n\nThese patterns matched the following files:\n\n  - cypress\\support\\steps\\login\\loginSucessStep.js\n  - cypress\\support\\steps\\adicionarCandidatos\\adicionarNovoCandidato.js\n\nHowever, none of these files contained a step definition matching \"O usuário informar Full Name \"Fulano de tal\"\".\n\nYou can implement it using the suggestion(s) below.\n\n  When(\"O usuário informar Full Name {string}\", function (string) {\n    return \"pending\";\n  });\n  ","stack":"    at Context.eval (https://opensource-demo.orangehrmlive.com/__cypress/tests?p=cypress\\e2e\\features\\adicionarNovoCandidato.feature:15054:29)"},"videoTimestamp":1493,"duration":8793,"startedAt":"2024-02-14T11:56:28.154Z","screenshots":[]}]}],"error":null,"video":"C:\\Projetos\\automatization-OrangeHRM\\cypress\\videos\\adicionarNovoCandidato.feature.mp4","spec":{"fileExtension":".feature","baseName":"adicionarNovoCandidato.feature","fileName":"adicionarNovoCandidato","specFileExtension":".feature","relativeToCommonRoot":"adicionarNovoCandidato.feature","specType":"integration","name":"cypress/e2e/features/adicionarNovoCandidato.feature","relative":"cypress\\e2e\\features\\adicionarNovoCandidato.feature","absolute":"C:/Projetos/automatization-OrangeHRM/cypress/e2e/features/adicionarNovoCandidato.feature"},"shouldUploadVideo":true},{"stats":{"suites":1,"tests":1,"passes":1,"pending":0,"skipped":0,"failures":0,"duration":4840,"startedAt":"2024-02-14T11:56:40.103Z","endedAt":"2024-02-14T11:56:44.943Z"},"reporter":"nyan","reporterStats":{"suites":1,"tests":1,"passes":1,"pending":0,"failures":0,"start":"2024-02-14T11:56:40.105Z","end":"2024-02-14T11:56:44.947Z","duration":4842},"hooks":[{"hookName":"before all","title":["\"before all\" hook"],"body":"function() {\n            beforeHandler.call(this, context);\n          }"},{"hookName":"before each","title":["\"before each\" hook"],"body":"function() {\n            beforeEachHandler.call(this, context);\n          }"},{"hookName":"after each","title":["\"after each\" hook"],"body":"function() {\n            afterEachHandler.call(this, context);\n          }"},{"hookName":"after all","title":["\"after all\" hook"],"body":"function() {\n            afterHandler.call(this, context);\n          }"}],"tests":[{"title":["Logar","Logar com sucesso"],"state":"passed","body":"function() {\n          var _a2, _b, _c, _d, _e;\n          const { remainingSteps, testCaseStartedId } = retrieveInternalSpecProperties();\n          taskTestCaseStarted(context, {\n            id: testCaseStartedId,\n            testCaseId,\n            attempt: attempt++,\n            timestamp: (0, messages_1.createTimestamp)()\n          });\n          window.testState = {\n            gherkinDocument,\n            pickles,\n            pickle\n          };\n          for (const step of steps) {\n            if (step.hook) {\n              const hook = step.hook;\n              const testStepId = getTestStepId({\n                context,\n                pickleId: pickle.id,\n                hookIdOrPickleStepId: hook.id\n              });\n              cy.then(() => {\n                delete window.testState.pickleStep;\n                const start = (0, messages_1.createTimestamp)();\n                internalProperties.currentStepStartedAt = start;\n                taskTestStepStarted(context, {\n                  testStepId,\n                  testCaseStartedId,\n                  timestamp: start\n                });\n                return cy.wrap(start, { log: false });\n              }).then((start) => {\n                const options = {\n                  pickle,\n                  gherkinDocument,\n                  testCaseStartedId\n                };\n                (0, cypress_1.runStepWithLogGroup)({\n                  fn: () => registry2.runCaseHook(this, hook, options),\n                  keyword: hook.keyword,\n                  text: createStepDescription(hook)\n                });\n                return cy.wrap(start, { log: false });\n              }).then((start) => {\n                const end = (0, messages_1.createTimestamp)();\n                taskTestStepFinished(context, {\n                  testStepId,\n                  testCaseStartedId,\n                  testStepResult: {\n                    status: messages.TestStepResultStatus.PASSED,\n                    duration: (0, messages_1.duration)(start, end)\n                  },\n                  timestamp: end\n                });\n                remainingSteps.shift();\n              });\n            } else if (step.pickleStep) {\n              const pickleStep = step.pickleStep;\n              const testStepId = getTestStepId({\n                context,\n                pickleId: pickle.id,\n                hookIdOrPickleStepId: pickleStep.id\n              });\n              const text = (0, assertions_1.assertAndReturn)(pickleStep.text, \"Expected pickle step to have a text\");\n              const scenarioStep = (0, assertions_1.assertAndReturn)(context.astIdsMap.get((0, assertions_1.assertAndReturn)((_a2 = pickleStep.astNodeIds) === null || _a2 === void 0 ? void 0 : _a2[0], \"Expected to find at least one astNodeId\")), `Expected to find scenario step associated with id = ${(_b = pickleStep.astNodeIds) === null || _b === void 0 ? void 0 : _b[0]}`);\n              const argument = ((_c = pickleStep.argument) === null || _c === void 0 ? void 0 : _c.dataTable) ? new data_table_1.default(pickleStep.argument.dataTable) : ((_e = (_d = pickleStep.argument) === null || _d === void 0 ? void 0 : _d.docString) === null || _e === void 0 ? void 0 : _e.content) ? pickleStep.argument.docString.content : void 0;\n              cy.then(() => {\n                window.testState.pickleStep = step.pickleStep;\n                const start = (0, messages_1.createTimestamp)();\n                internalProperties.currentStep = { pickleStep };\n                internalProperties.currentStepStartedAt = start;\n                taskTestStepStarted(context, {\n                  testStepId,\n                  testCaseStartedId,\n                  timestamp: start\n                });\n                return cy.wrap(start, { log: false });\n              }).then((start) => {\n                const beforeStepHooks = registry2.resolveBeforeStepHooks(tags);\n                const afterStepHooks = registry2.resolveAfterStepHooks(tags);\n                const options = {\n                  pickle,\n                  pickleStep,\n                  gherkinDocument,\n                  testCaseStartedId,\n                  testStepId\n                };\n                const beforeHooksChain = beforeStepHooks.reduce((chain, beforeStepHook) => {\n                  return chain.then(() => (0, cypress_1.runStepWithLogGroup)({\n                    keyword: \"BeforeStep\",\n                    text: createStepDescription(beforeStepHook),\n                    fn: () => registry2.runStepHook(this, beforeStepHook, options)\n                  }));\n                }, cy.wrap({}, { log: false }));\n                return beforeHooksChain.then(() => {\n                  try {\n                    return (0, cypress_1.runStepWithLogGroup)({\n                      keyword: (0, assertions_1.assertAndReturn)(\"keyword\" in scenarioStep && scenarioStep.keyword, \"Expected to find a keyword in the scenario step\"),\n                      argument,\n                      text,\n                      fn: () => registry2.runStepDefininition(this, text, argument)\n                    }).then((result) => {\n                      return afterStepHooks.reduce((chain, afterStepHook) => {\n                        return chain.then(() => (0, cypress_1.runStepWithLogGroup)({\n                          keyword: \"AfterStep\",\n                          text: createStepDescription(afterStepHook),\n                          fn: () => registry2.runStepHook(this, afterStepHook, options)\n                        }));\n                      }, cy.wrap({}, { log: false })).then(() => {\n                        return { start, result };\n                      });\n                    });\n                  } catch (e) {\n                    if (e instanceof registry_1.MissingDefinitionError) {\n                      throw new Error(createMissingStepDefinitionMessage(context, pickleStep, context.registry.parameterTypeRegistry));\n                    } else {\n                      throw e;\n                    }\n                  }\n                });\n              }).then(({ start, result }) => {\n                var _a3, _b2, _c2;\n                const end = (0, messages_1.createTimestamp)();\n                if (result === \"pending\" || result === \"skipped\") {\n                  if (result === \"pending\") {\n                    taskTestStepFinished(context, {\n                      testStepId,\n                      testCaseStartedId,\n                      testStepResult: {\n                        status: messages.TestStepResultStatus.PENDING,\n                        duration: (0, messages_1.duration)(start, end)\n                      },\n                      timestamp: end\n                    });\n                  } else {\n                    taskTestStepFinished(context, {\n                      testStepId,\n                      testCaseStartedId,\n                      testStepResult: {\n                        status: messages.TestStepResultStatus.SKIPPED,\n                        duration: (0, messages_1.duration)(start, end)\n                      },\n                      timestamp: end\n                    });\n                  }\n                  remainingSteps.shift();\n                  for (const skippedStep of remainingSteps) {\n                    const hookIdOrPickleStepId = (0, assertions_1.assertAndReturn)((_b2 = (_a3 = skippedStep.hook) === null || _a3 === void 0 ? void 0 : _a3.id) !== null && _b2 !== void 0 ? _b2 : (_c2 = skippedStep.pickleStep) === null || _c2 === void 0 ? void 0 : _c2.id, \"Expected a step to either be a hook or a pickleStep\");\n                    const testStepId2 = getTestStepId({\n                      context,\n                      pickleId: pickle.id,\n                      hookIdOrPickleStepId\n                    });\n                    taskTestStepStarted(context, {\n                      testStepId: testStepId2,\n                      testCaseStartedId,\n                      timestamp: (0, messages_1.createTimestamp)()\n                    });\n                    taskTestStepFinished(context, {\n                      testStepId: testStepId2,\n                      testCaseStartedId,\n                      testStepResult: {\n                        status: messages.TestStepResultStatus.SKIPPED,\n                        duration: {\n                          seconds: 0,\n                          nanos: 0\n                        }\n                      },\n                      timestamp: (0, messages_1.createTimestamp)()\n                    });\n                  }\n                  for (let i = 0, count = remainingSteps.length; i < count; i++) {\n                    remainingSteps.pop();\n                  }\n                  cy.then(() => this.skip());\n                } else {\n                  taskTestStepFinished(context, {\n                    testStepId,\n                    testCaseStartedId,\n                    testStepResult: {\n                      status: messages.TestStepResultStatus.PASSED,\n                      duration: (0, messages_1.duration)(start, end)\n                    },\n                    timestamp: end\n                  });\n                  remainingSteps.shift();\n                }\n              });\n            }\n          }\n        }","displayError":null,"attempts":[{"state":"passed","error":null,"videoTimestamp":995,"duration":4833,"startedAt":"2024-02-14T11:56:40.109Z","screenshots":[]}]}],"error":null,"video":"C:\\Projetos\\automatization-OrangeHRM\\cypress\\videos\\login.feature.mp4","spec":{"fileExtension":".feature","baseName":"login.feature","fileName":"login","specFileExtension":".feature","relativeToCommonRoot":"login.feature","specType":"integration","name":"cypress/e2e/features/login.feature","relative":"cypress\\e2e\\features\\login.feature","absolute":"C:/Projetos/automatization-OrangeHRM/cypress/e2e/features/login.feature"},"shouldUploadVideo":true}],"browserPath":"C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe","browserName":"chrome","browserVersion":"121.0.6167.162","osName":"win32","osVersion":"10.0.22631","cypressVersion":"12.4.0","config":{"configFile":"C:\\Projetos\\automatization-OrangeHRM\\cypress.config.js","env":{"__cypress_cucumber_preprocessor_dont_use_this_suite":{"isEventHandlersAttached":true}},"testingType":"e2e","specPattern":"**/*.feature","baseUrl":"https://opensource-demo.orangehrmlive.com/web/index.php/auth","chromeWebSecurity":true,"setupNodeEvents":"[Function setupNodeEvents]","viewportWidth":1920,"experimentalInteractiveRunEvents":true,"viewportHeight":1080,"supportFile":"C:\\Projetos\\automatization-OrangeHRM\\cypress\\support\\plugins\\e2e.js","screenshotsFolder":"C:\\Projetos\\automatization-OrangeHRM\\cypress\\screenshots","projectRoot":"C:\\Projetos\\automatization-OrangeHRM","projectName":"automatization-OrangeHRM","repoRoot":"C:/Projetos/automatization-OrangeHRM","rawJson":{"e2e":{"specPattern":"**/*.feature","baseUrl":"https://opensource-demo.orangehrmlive.com/web/index.php/auth","chromeWebSecurity":true,"setupNodeEvents":"[Function setupNodeEvents]","viewportWidth":1920,"experimentalInteractiveRunEvents":true,"viewportHeight":1080,"supportFile":"cypress/support/plugins/e2e.js","screenshotsFolder":"cypress/screenshots"},"specPattern":"**/*.feature","baseUrl":"https://opensource-demo.orangehrmlive.com/web/index.php/auth","chromeWebSecurity":true,"setupNodeEvents":"[Function setupNodeEvents]","viewportWidth":1920,"experimentalInteractiveRunEvents":true,"viewportHeight":1080,"supportFile":"cypress/support/plugins/e2e.js","screenshotsFolder":"cypress/screenshots","envFile":{},"projectRoot":"C:\\Projetos\\automatization-OrangeHRM","projectName":"automatization-OrangeHRM","repoRoot":"C:/Projetos/automatization-OrangeHRM"},"morgan":false,"isTextTerminal":true,"socketId":"zb66g0sums","report":true,"reporter":"nyan","animationDistanceThreshold":5,"arch":"x64","blockHosts":null,"clientCertificates":[],"defaultCommandTimeout":4000,"downloadsFolder":"C:\\Projetos\\automatization-OrangeHRM\\cypress\\downloads","execTimeout":60000,"experimentalFetchPolyfill":false,"experimentalRunAllSpecs":false,"experimentalMemoryManagement":false,"experimentalModifyObstructiveThirdPartyCode":false,"experimentalSkipDomainInjection":null,"experimentalOriginDependencies":false,"experimentalSourceRewriting":false,"experimentalSingleTabRunMode":false,"experimentalStudio":false,"experimentalWebKitSupport":false,"fileServerFolder":"C:\\Projetos\\automatization-OrangeHRM","fixturesFolder":"C:\\Projetos\\automatization-OrangeHRM\\cypress\\fixtures","excludeSpecPattern":"*.hot-update.js","includeShadowDom":false,"keystrokeDelay":0,"modifyObstructiveCode":true,"numTestsKeptInMemory":0,"platform":"win32","pageLoadTimeout":60000,"port":50976,"projectId":null,"redirectionLimit":20,"reporterOptions":null,"requestTimeout":5000,"resolvedNodePath":"C:\\Program Files\\nodejs\\node.exe","resolvedNodeVersion":"20.4.0","responseTimeout":30000,"retries":{"runMode":0,"openMode":0},"screenshotOnRunFailure":true,"slowTestThreshold":10000,"scrollBehavior":"top","supportFolder":"C:\\Projetos\\automatization-OrangeHRM\\cypress\\support\\plugins","taskTimeout":60000,"testIsolation":true,"trashAssetsBeforeRuns":true,"userAgent":null,"video":true,"videoCompression":32,"videosFolder":"C:\\Projetos\\automatization-OrangeHRM\\cypress\\videos","videoUploadOnPasses":true,"waitForAnimations":true,"watchForFileChanges":false,"additionalIgnorePattern":[],"autoOpen":false,"browsers":[{"name":"chrome","family":"chromium","channel":"stable","displayName":"Chrome","version":"121.0.6167.162","path":"C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe","minSupportedVersion":64,"majorVersion":"121"},{"name":"firefox","family":"firefox","channel":"stable","displayName":"Firefox","version":"121.0","path":"C:\\Program Files\\Mozilla Firefox\\firefox.exe","minSupportedVersion":86,"majorVersion":"121"},{"name":"edge","family":"chromium","channel":"stable","displayName":"Edge","version":"121.0.2277.112","path":"C:\\Program Files (x86)\\Microsoft\\Edge\\Application\\msedge.exe","minSupportedVersion":79,"majorVersion":"121"},{"name":"electron","channel":"stable","family":"chromium","displayName":"Electron","version":"106.0.5249.51","path":"","majorVersion":106}],"clientRoute":"/__/","cypressBinaryRoot":"C:\\Users\\lucas\\AppData\\Local\\Cypress\\Cache\\12.4.0\\Cypress\\resources\\app","devServerPublicPathRoute":"/__cypress/src","hosts":null,"isInteractive":true,"namespace":"__cypress","reporterRoute":"/__cypress/reporter","socketIoCookie":"__socket","socketIoRoute":"/__socket","version":"12.4.0","cypressEnv":"production","resolved":{"animationDistanceThreshold":{"value":5,"from":"default"},"arch":{"value":"x64","from":"default"},"baseUrl":{"value":"https://opensource-demo.orangehrmlive.com/web/index.php/auth","from":"config"},"blockHosts":{"value":null,"from":"default"},"chromeWebSecurity":{"value":true,"from":"default"},"clientCertificates":{"value":[],"from":"default"},"defaultCommandTimeout":{"value":4000,"from":"default"},"downloadsFolder":{"value":"cypress/downloads","from":"default"},"env":{"__cypress_cucumber_preprocessor_dont_use_this_suite":{"value":{"isEventHandlersAttached":true},"from":"plugin"}},"execTimeout":{"value":60000,"from":"default"},"experimentalFetchPolyfill":{"value":false,"from":"default"},"experimentalInteractiveRunEvents":{"value":true,"from":"config"},"experimentalRunAllSpecs":{"value":false,"from":"default"},"experimentalMemoryManagement":{"value":false,"from":"default"},"experimentalModifyObstructiveThirdPartyCode":{"value":false,"from":"default"},"experimentalSkipDomainInjection":{"value":null,"from":"default"},"experimentalOriginDependencies":{"value":false,"from":"default"},"experimentalSourceRewriting":{"value":false,"from":"default"},"experimentalSingleTabRunMode":{"value":false,"from":"default"},"experimentalStudio":{"value":false,"from":"default"},"experimentalWebKitSupport":{"value":false,"from":"default"},"fileServerFolder":{"value":"","from":"default"},"fixturesFolder":{"value":"cypress/fixtures","from":"default"},"excludeSpecPattern":{"value":"*.hot-update.js","from":"default"},"includeShadowDom":{"value":false,"from":"default"},"keystrokeDelay":{"value":0,"from":"default"},"modifyObstructiveCode":{"value":true,"from":"default"},"nodeVersion":{"from":"default"},"numTestsKeptInMemory":{"value":0,"from":"config"},"platform":{"value":"win32","from":"default"},"pageLoadTimeout":{"value":60000,"from":"default"},"port":{"value":null,"from":"default"},"projectId":{"value":null,"from":"default"},"redirectionLimit":{"value":20,"from":"default"},"reporter":{"value":"nyan","from":"cli"},"reporterOptions":{"value":null,"from":"default"},"requestTimeout":{"value":5000,"from":"default"},"resolvedNodePath":{"value":null,"from":"default"},"resolvedNodeVersion":{"value":null,"from":"default"},"responseTimeout":{"value":30000,"from":"default"},"retries":{"value":{"runMode":0,"openMode":0},"from":"default"},"screenshotOnRunFailure":{"value":true,"from":"default"},"screenshotsFolder":{"value":"cypress/screenshots","from":"default"},"slowTestThreshold":{"value":10000,"from":"default"},"scrollBehavior":{"value":"top","from":"default"},"supportFile":{"value":"cypress/support/plugins/e2e.js","from":"config"},"supportFolder":{"value":false,"from":"default"},"taskTimeout":{"value":60000,"from":"default"},"testIsolation":{"value":true,"from":"default"},"trashAssetsBeforeRuns":{"value":true,"from":"default"},"userAgent":{"value":null,"from":"default"},"video":{"value":true,"from":"default"},"videoCompression":{"value":32,"from":"default"},"videosFolder":{"value":"cypress/videos","from":"default"},"videoUploadOnPasses":{"value":true,"from":"default"},"viewportHeight":{"value":1080,"from":"config"},"viewportWidth":{"value":1920,"from":"config"},"waitForAnimations":{"value":true,"from":"default"},"watchForFileChanges":{"value":false,"from":"config"},"specPattern":{"value":"**/*.feature","from":"config"},"browsers":{"value":[{"name":"chrome","family":"chromium","channel":"stable","displayName":"Chrome","version":"121.0.6167.162","path":"C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe","minSupportedVersion":64,"majorVersion":"121","isHeadless":true,"isHeaded":false},{"name":"firefox","family":"firefox","channel":"stable","displayName":"Firefox","version":"121.0","path":"C:\\Program Files\\Mozilla Firefox\\firefox.exe","minSupportedVersion":86,"majorVersion":"121"},{"name":"edge","family":"chromium","channel":"stable","displayName":"Edge","version":"121.0.2277.112","path":"C:\\Program Files (x86)\\Microsoft\\Edge\\Application\\msedge.exe","minSupportedVersion":79,"majorVersion":"121"},{"name":"electron","channel":"stable","family":"chromium","displayName":"Electron","version":"106.0.5249.51","path":"","majorVersion":106}],"from":"runtime"},"hosts":{"value":null,"from":"default"},"isInteractive":{"value":true,"from":"default"},"configFile":{"value":"C:\\Projetos\\automatization-OrangeHRM\\cypress.config.js","from":"plugin"},"testingType":{"value":"e2e","from":"plugin"}},"remote":{"origin":"https://opensource-demo.orangehrmlive.com","strategy":"http","fileServer":null,"domainName":"orangehrmlive.com","props":{"port":"443","protocol":"https:","subdomain":"opensource-demo","domain":"orangehrmlive","tld":"com"}},"browser":null,"specs":[],"proxyUrl":"http://localhost:50976","browserUrl":"https://opensource-demo.orangehrmlive.com/__/","reporterUrl":"https://opensource-demo.orangehrmlive.com/__cypress/reporter","proxyServer":"http://localhost:50976","state":{}}}